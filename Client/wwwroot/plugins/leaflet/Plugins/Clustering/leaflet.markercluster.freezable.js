!function (e, i) { "function" == typeof define && define.amd ? define(["leaflet"], i) : i("object" == typeof module && module.exports ? require("leaflet") : e.L) }(this, function (e, o) { e.MarkerClusterGroup.include({ _isClustered: !0, _originalOnAddFreezable: e.MarkerClusterGroup.prototype.onAdd, onAdd: function (e) { var i = this._zoom; this._originalOnAddFreezable(e), this._frozen && (0 <= i && i !== this._zoom && (this._featureGroup.clearLayers(), this._zoom = i, this.addLayers([])), e.off("zoomend", this._zoomEnd, this), e.off("moveend", this._moveEnd, this), e.on("zoomend moveend", this._viewChangeEndNotClustering, this)) }, _originalOnRemove: e.MarkerClusterGroup.prototype.onRemove, onRemove: function (e) { e.off("zoomend moveend", this._viewChangeEndNotClustering, this), this._originalOnRemove(e) }, disableClustering: function () { return this.isClustered() ? this.freezeAtZoom(this._maxZoom + 1) : this }, disableClusteringKeepSpiderfy: function () { return this.freezeAtZoom(this._maxZoom) }, enableClustering: function () { return this.isClustered() ? this : this.unfreeze() }, isClustered: function () { return this._isClustered }, unfreeze: function () { return this.freezeAtZoom(!1) }, freezeAtZoom: function (e) { this._processQueue(); var i = this._map; e === o || !0 === e || e != e ? e = i ? Math.round(i.getZoom()) : -1 : "max" === e ? e = this._maxZoom + 1 : "maxKeepSpiderfy" === e && (e = this._maxZoom); var t = "number" == typeof e; if (this._frozen) { if (this._isClustered = !0, !t) return this._unfreeze(), this } else { if (!t) return this; this._isClustered = !1, this._initiateFreeze() } return this._artificialZoomSafe(this._zoom, e), this }, _initiateFreeze: function () { var e = this._map; this._frozen = !0, e && (e.off("zoomend", this._zoomEnd, this), e.off("moveend", this._moveEnd, this), e.on("zoomend moveend", this._viewChangeEndNotClustering, this)) }, _unfreeze: function () { var e = this._map; this._frozen = !1, e && (e.off("zoomend moveend", this._viewChangeEndNotClustering, this), e.on("zoomend", this._zoomEnd, this), e.on("moveend", this._moveEnd, this), this._executeAfterUnspiderfy(function () { this._zoomEnd() }, this)) }, _executeAfterUnspiderfy: function (e, i) { return this._unspiderfy && this._spiderfied ? (this.once("animationend", function () { e.call(i) }), void this._unspiderfy()) : void e.call(i) }, _artificialZoomSafe: function (e, i) { this._zoom = i, this._map && e !== i && this._executeAfterUnspiderfy(function () { this._artificialZoom(e, i) }, this) }, _artificialZoom: function (e, i) { e < i ? (this._animationStart(), this._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, this._map.getMinZoom(), e, this._getExpandedVisibleBounds()), this._animationZoomIn(e, i)) : i < e && (this._animationStart(), this._animationZoomOut(e, i)) }, _viewChangeEndNotClustering: function () { var n = this._featureGroup, r = this._getExpandedVisibleBounds(), s = this._zoom; n.eachLayer(function (e) { !r.contains(e._latlng) && e.__parent && e.__parent._zoom < s && n.removeLayer(e) }), this._topClusterLevel._recursively(r, -1, s, function (e) { if (e._zoom !== s) for (var i, t = e._markers, o = 0; o < t.length; o++) i = e._markers[o], r.contains(i._latlng) && n.addLayer(i) }, function (e) { e._addToMap() }), this._currentShownBounds = r }, _originalZoomOrSpiderfy: e.MarkerClusterGroup.prototype._zoomOrSpiderfy, _zoomOrSpiderfy: function (e) { this._frozen && this.options.spiderfyOnMaxZoom ? (e.layer.spiderfy(), e.originalEvent && 13 === e.originalEvent.keyCode && map._container.focus()) : this._originalZoomOrSpiderfy(e) } }) });